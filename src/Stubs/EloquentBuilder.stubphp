<?php

namespace Illuminate\Database\Eloquent;

use Illuminate\Database\Concerns\BuildsQueries;
use Illuminate\Database\Query\Builder as QueryBuilder;
use Illuminate\Support\Traits\ForwardsCalls;

/**
 * @template TModel of \Illuminate\Database\Eloquent\Model
 * @property-read HigherOrderBuilderProxy $orWhere
 *
 * @mixin \Illuminate\Database\Query\Builder
 */
class Builder
{
    use BuildsQueries, Concerns\QueriesRelationships, ForwardsCalls;

    /**
     * @param  \Illuminate\Database\Query\Builder  $query
     * @return void
     */
    public function __construct(QueryBuilder $query) { }

    /**
     * @param  array  $attributes
     * @return TModel
     */
    public function make(array $attributes = []) { }

    /**
     * @param  string  $identifier
     * @param  \Illuminate\Database\Eloquent\Scope|\Closure  $scope
     * @return static
     */
    public function withGlobalScope($identifier, $scope) { }

    /**
     * @param  \Illuminate\Database\Eloquent\Scope|string  $scope
     * @return static
     */
    public function withoutGlobalScope($scope) { }

    /**
     * @param  array|null  $scopes
     * @return static
     */
    public function withoutGlobalScopes(array $scopes = null) { }

    /**
     * @return array
     */
    public function removedScopes() { }

    /**
     * @param  mixed  $id
     * @return static
     */
    public function whereKey($id) { }

    /**
     * @param  mixed  $id
     * @return static
     */
    public function whereKeyNot($id) { }

    /**
     * @param  string|array|\Closure  $column
     * @param  mixed   $operator
     * @param  mixed   $value
     * @param  string  $boolean
     * @return static
     */
    public function where($column, $operator = null, $value = null, $boolean = 'and') { }

    /**
     * @param  \Closure|string|array|\Illuminate\Database\Query\Expression  $column
     * @param  mixed  $operator
     * @param  mixed  $value
     * @param  string  $boolean
     * @return TModel|null
     */
    public function firstWhere($column, $operator = null, $value = null, $boolean = 'and') { }

    /**
     * @param  \Closure|array|string  $column
     * @param  mixed  $operator
     * @param  mixed  $value
     * @return static
     */
    public function orWhere($column, $operator = null, $value = null) { }

    /**
     * @param  string  $column
     * @return static
     */
    public function latest($column = null) { }

    /**
     * @param  string  $column
     * @return static
     */
    public function oldest($column = null) { }

    /**
     * @param  array  $items
     * @return \Illuminate\Database\Eloquent\Collection<TModel>
     */
    public function hydrate(array $items) { }

    /**
     * @param  string  $query
     * @param  array  $bindings
     * @return \Illuminate\Database\Eloquent\Collection<TModel>
     */
    public function fromQuery($query, $bindings = []) { }

    /**
     * @template T
     * @param  T $id
     * @param  array  $columns
     * @return (T is array ? \Illuminate\Database\Eloquent\Collection<TModel> : TModel)
     */
    public function find($id, $columns = ['*']) { }

    /**
     * @param  \Illuminate\Contracts\Support\Arrayable|array  $ids
     * @param  array  $columns
     * @return \Illuminate\Database\Eloquent\Collection<TModel>
     */
    public function findMany($ids, $columns = ['*']) { }

    /**
     * @template T
     * @param  T $id
     * @param  array  $columns
     * @return (T is array ? \Illuminate\Database\Eloquent\Collection<TModel> : TModel)
     */
    public function findOrFail($id, $columns = ['*']) { }

    /**
     * @param  mixed  $id
     * @param  array  $columns
     * @return TModel
     */
    public function findOrNew($id, $columns = ['*']) { }

    /**
     * @param  array  $attributes
     * @param  array  $values
     * @return TModel
     */
    public function firstOrNew(array $attributes, array $values = []) { }

    /**
     * @param  array  $attributes
     * @param  array  $values
     * @return TModel
     */
    public function firstOrCreate(array $attributes, array $values = []) { }

    /**
     * @param  array  $attributes
     * @param  array  $values
     * @return TModel
     */
    public function updateOrCreate(array $attributes, array $values = []) { }

    /**
     * @param  array<array-key, string>  $columns
     * @return TModel
     *
     * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
     */
    public function firstOrFail($columns = ['*']) { }

    /**
     * @param  \Closure|array  $columns
     * @param  \Closure|null  $callback
     * @return TModel|mixed
     */
    public function firstOr($columns = ['*'], \Closure $callback = null) { }

    /**
     * @param  string  $column
     * @return mixed
     */
    public function value($column) { }

    /**
     * @param  array  $columns
     * @return \Illuminate\Database\Eloquent\Collection<TModel>
     */
    public function get($columns = ['*']) { }

    /**
     * @param  array  $columns
     * @return array<array-key, TModel>
     */
    public function getModels($columns = ['*']) { }

    /**
     * @param  array  $models
     * @return array
     */
    public function eagerLoadRelations(array $models) { }

    /**
     * @param  string  $name
     * @return \Illuminate\Database\Eloquent\Relations\Relation
     */
    public function getRelation($name) { }

    /**
     * @return \Illuminate\Support\LazyCollection<TModel>
     */
    public function cursor() { }

    /**
     * @param  int  $count
     * @param  callable  $callback
     * @param  string|null  $column
     * @param  string|null  $alias
     * @return bool
     */
    public function chunkById($count, callable $callback, $column = null, $alias = null) { }

    /**
     * @return void
     */
    protected function enforceOrderBy() { }

    /**
     * @param  string  $column
     * @param  string|null  $key
     * @return \Illuminate\Support\Collection
     */
    public function pluck($column, $key = null) { }

    /**
     * @param  int  $perPage
     * @param  array  $columns
     * @param  string  $pageName
     * @param  int|null  $page
     * @return \Illuminate\Contracts\Pagination\LengthAwarePaginator
     *
     * @throws \InvalidArgumentException
     */
    public function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null) { }

    /**
     * @param  int  $perPage
     * @param  array  $columns
     * @param  string  $pageName
     * @param  int|null  $page
     * @return \Illuminate\Contracts\Pagination\Paginator
     */
    public function simplePaginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null) { }

    /**
     * @param  array  $attributes
     * @return TModel
     */
    public function create(array $attributes = []) { }

    /**
     * @param  array  $attributes
     * @return TModel
     */
    public function forceCreate(array $attributes) { }

    /**
     * @param  array  $values
     * @return int
     */
    public function update(array $values) { }

    /**
     * @param  string  $column
     * @param  float|int  $amount
     * @param  array  $extra
     * @return int
     */
    public function increment($column, $amount = 1, array $extra = []) { }

    /**
     * @param  string  $column
     * @param  float|int  $amount
     * @param  array  $extra
     * @return int
     */
    public function decrement($column, $amount = 1, array $extra = []) { }

    /**
     * @return mixed
     */
    public function delete() { }

    /**
     * @return mixed
     */
    public function forceDelete() { }

    /**
     * @param  \Closure  $callback
     * @return void
     */
    public function onDelete(\Closure $callback) { }

    /**
     * Call the given local model scopes.
     *
     * @param  array  $scopes
     * @return static
     */
    public function scopes(array $scopes) { }

    /**
     * @return static
     */
    public function applyScopes() { }

    /**
     * @param  mixed  $relations
     * @return static
     */
    public function with($relations) { }

    /**
     * @param  mixed  $relations
     * @return static
     */
    public function without($relations) { }

    /**
     * @param  array  $attributes
     * @return TModel
     */
    public function newModelInstance($attributes = []) { }

    /**
     * @return \Illuminate\Database\Query\Builder
     */
    public function getQuery() { }

    /**
     * @param  \Illuminate\Database\Query\Builder  $query
     * @return static
     */
    public function setQuery($query) { }

    /**
     * @return \Illuminate\Database\Query\Builder
     */
    public function toBase() { }

    /**
     * @return array
     */
    public function getEagerLoads() { }

    /**
     * @param array $eagerLoad
     * @return static
     */
    public function setEagerLoads(array $eagerLoad) { }

    /**
     * @return TModel
     */
    public function getModel() { }

    /**
     * @param TModel $model
     * @return static
     */
    public function setModel(Model $model) { }
    
    /**
     * @return TModel|null
     */
    public function first($columns = ['*']) { }


    //
    // Methods below are copied from Query/Builder.
    // In Eloquent/Builder in __call, Laravel forwards calls to non-existing methods to the $this->query which is
    // Query/Builder. It then returns $this, which is Eloquent/Builder. This means that in case of Eloquent/Builder,
    // all Query/Builder methods will return Eloquent/Builder instance. Simplest way to replicate this behavior is to
    // copy-paste all Query/Builder methods that are not defined in Eloquent/Builder and set appropriate return type.
    // Query/Builder is used in other places so we can't change return types there.
    //


    /**
     * @param  array|mixed  $columns
     * @return static
     */
    public function select($columns = ['*']) { }

    /**
     * @param  \Closure|$this|string  $query
     * @param  string  $as
     * @return static
     *
     * @throws \InvalidArgumentException
     */
    public function selectSub($query, $as) { }

    /**
     * @param  string  $expression
     * @param  array  $bindings
     * @return static
     */
    public function selectRaw($expression, array $bindings = []) { }

    /**
     * @param  \Closure|\Illuminate\Database\Query\Builder|string  $query
     * @param  string  $as
     * @return static
     *
     * @throws \InvalidArgumentException
     */
    public function fromSub($query, $as) { }


    /**
     * @param  string  $expression
     * @param  mixed  $bindings
     * @return static
     */
    public function fromRaw($expression, $bindings = []) { }

    /**
     * @param  array|mixed  $column
     * @return static
     */
    public function addSelect($column) { }

    /**
     * @return static
     */
    public function distinct() { }

    /**
     * @param  \Closure|\Illuminate\Database\Query\Builder|string  $table
     * @param  string|null  $as
     * @return static
     */
    public function from($table, $as = null) { }

    /**
     * @param  string  $table
     * @param  \Closure|string  $first
     * @param  string|null  $operator
     * @param  string|null  $second
     * @param  string  $type
     * @param  bool  $where
     * @return static
     */
    public function join($table, $first, $operator = null, $second = null, $type = 'inner', $where = false) { }

    /**
     * @param  string  $table
     * @param  \Closure|string  $first
     * @param  string  $operator
     * @param  string  $second
     * @param  string  $type
     * @return static
     */
    public function joinWhere($table, $first, $operator, $second, $type = 'inner') { }

    /**
     * @param  \Closure|\Illuminate\Database\Query\Builder|string  $query
     * @param  string  $as
     * @param  \Closure|string  $first
     * @param  string|null  $operator
     * @param  string|null  $second
     * @param  string  $type
     * @param  bool  $where
     * @return static
     *
     * @throws \InvalidArgumentException
     */
    public function joinSub($query, $as, $first, $operator = null, $second = null, $type = 'inner', $where = false) { }

    /**
     * @param  string  $table
     * @param  \Closure|string  $first
     * @param  string|null  $operator
     * @param  string|null  $second
     * @return static
     */
    public function leftJoin($table, $first, $operator = null, $second = null) { }

    /**
     * @param  string  $table
     * @param  \Closure|string  $first
     * @param  string  $operator
     * @param  string  $second
     * @return static
     */
    public function leftJoinWhere($table, $first, $operator, $second) { }

    /**
     * @param  \Closure|\Illuminate\Database\Query\Builder|string  $query
     * @param  string  $as
     * @param  \Closure|string  $first
     * @param  string|null  $operator
     * @param  string|null  $second
     * @return static
     */
    public function leftJoinSub($query, $as, $first, $operator = null, $second = null) { }

    /**
     * @param  string  $table
     * @param  \Closure|string  $first
     * @param  string|null  $operator
     * @param  string|null  $second
     * @return static
     */
    public function rightJoin($table, $first, $operator = null, $second = null) { }

    /**
     * @param  string  $table
     * @param  \Closure|string  $first
     * @param  string  $operator
     * @param  string  $second
     * @return static
     */
    public function rightJoinWhere($table, $first, $operator, $second) { }

    /**
     * @param  \Closure|\Illuminate\Database\Query\Builder|string  $query
     * @param  string  $as
     * @param  \Closure|string  $first
     * @param  string|null  $operator
     * @param  string|null  $second
     * @return static
     */
    public function rightJoinSub($query, $as, $first, $operator = null, $second = null) { }

    /**
     * Add a "cross join" clause to the query.
     *
     * @param  string  $table
     * @param  \Closure|string|null  $first
     * @param  string|null  $operator
     * @param  string|null  $second
     * @return static
     */
    public function crossJoin($table, $first = null, $operator = null, $second = null) { }

    /**
     * @param  array  $wheres
     * @param  array  $bindings
     * @return void
     */
    public function mergeWheres($wheres, $bindings) { }

    /**
     * @param  string|array  $first
     * @param  string|null  $operator
     * @param  string|null  $second
     * @param  string|null  $boolean
     * @return static
     */
    public function whereColumn($first, $operator = null, $second = null, $boolean = 'and') { }

    /**
     * @param  string|array  $first
     * @param  string|null  $operator
     * @param  string|null  $second
     * @return static
     */
    public function orWhereColumn($first, $operator = null, $second = null) { }

    /**
     * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string  $column
     * @param  string  $direction
     * @return static
     *
     * @throws \InvalidArgumentException
     */
    public function orderBy($column, $direction = 'asc') { }

    /**
     * @param  string  $sql
     * @param  mixed  $bindings
     * @param  string  $boolean
     * @return static
     */
    public function whereRaw($sql, $bindings = [], $boolean = 'and') { }

    /**
     * @param  string  $sql
     * @param  mixed  $bindings
     * @return static
     */
    public function orWhereRaw($sql, $bindings = []) { }

    /**
     * @param  string  $column
     * @param  mixed  $values
     * @param  string  $boolean
     * @param  bool  $not
     * @return static
     */
    public function whereIn($column, $values, $boolean = 'and', $not = false) { }

    /**
     * @param  string  $column
     * @param  mixed  $values
     * @return static
     */
    public function orWhereIn($column, $values) { }

    /**
     * @param  string  $column
     * @param  mixed  $values
     * @param  string  $boolean
     * @return static
     */
    public function whereNotIn($column, $values, $boolean = 'and') { }

    /**
     * @param  string  $column
     * @param  mixed  $values
     * @return static
     */
    public function orWhereNotIn($column, $values) { }

    /**
     * @param  string  $column
     * @param  \Illuminate\Contracts\Support\Arrayable|array  $values
     * @param  string  $boolean
     * @param  bool  $not
     * @return static
     */
    public function whereIntegerInRaw($column, $values, $boolean = 'and', $not = false) { }

    /**
     * @param  string  $column
     * @param  \Illuminate\Contracts\Support\Arrayable|array  $values
     * @param  string  $boolean
     * @return static
     */
    public function whereIntegerNotInRaw($column, $values, $boolean = 'and') { }

    /**
     * @param  string|array  $columns
     * @param  string  $boolean
     * @param  bool  $not
     * @return static
     */
    public function whereNull($columns, $boolean = 'and', $not = false) { }

    /**
     * @param  string  $column
     * @return static
     */
    public function orWhereNull($column) { }

    /**
     * @param  string|array  $columns
     * @param  string  $boolean
     * @return static
     */
    public function whereNotNull($columns, $boolean = 'and') { }

    /**
     * @param  string  $column
     * @param  array  $values
     * @param  string  $boolean
     * @param  bool  $not
     * @return static
     */
    public function whereBetween($column, array $values, $boolean = 'and', $not = false) { }

    /**
     * @param  string  $column
     * @param  array  $values
     * @return static
     */
    public function orWhereBetween($column, array $values) { }

    /**
     * @param  string  $column
     * @param  array  $values
     * @param  string  $boolean
     * @return static
     */
    public function whereNotBetween($column, array $values, $boolean = 'and') { }

    /**
     * @param  string  $column
     * @param  array  $values
     * @return static
     */
    public function orWhereNotBetween($column, array $values) { }

    /**
     * @param  string  $column
     * @return static
     */
    public function orWhereNotNull($column) { }

    /**
     * @param  string  $column
     * @param  string  $operator
     * @param  \DateTimeInterface|string|null  $value
     * @param  string  $boolean
     * @return static
     */
    public function whereDate($column, $operator, $value = null, $boolean = 'and') { }

    /**
     * @param  string  $column
     * @param  string  $operator
     * @param  \DateTimeInterface|string|null  $value
     * @return static
     */
    public function orWhereDate($column, $operator, $value = null) { }

    /**
     * @param  string  $column
     * @param  string  $operator
     * @param  \DateTimeInterface|string|null  $value
     * @param  string  $boolean
     * @return static
     */
    public function whereTime($column, $operator, $value = null, $boolean = 'and') { }

    /**
     * @param  string  $column
     * @param  string  $operator
     * @param  \DateTimeInterface|string|null  $value
     * @return static
     */
    public function orWhereTime($column, $operator, $value = null) { }

    /**
     * @param  string  $column
     * @param  string  $operator
     * @param  \DateTimeInterface|string|null  $value
     * @param  string  $boolean
     * @return static
     */
    public function whereDay($column, $operator, $value = null, $boolean = 'and') { }

    /**
     * @param  string  $column
     * @param  string  $operator
     * @param  \DateTimeInterface|string|null  $value
     * @return static
     */
    public function orWhereDay($column, $operator, $value = null) { }

    /**
     * @param  string  $column
     * @param  string  $operator
     * @param  \DateTimeInterface|string|null  $value
     * @param  string  $boolean
     * @return static
     */
    public function whereMonth($column, $operator, $value = null, $boolean = 'and') { }

    /**
     * @param  string  $column
     * @param  string  $operator
     * @param  \DateTimeInterface|string|null  $value
     * @return static
     */
    public function orWhereMonth($column, $operator, $value = null) { }

    /**
     * @param  string  $column
     * @param  string  $operator
     * @param  \DateTimeInterface|string|int|null  $value
     * @param  string  $boolean
     * @return static
     */
    public function whereYear($column, $operator, $value = null, $boolean = 'and') { }

    /**
     * @param  string  $column
     * @param  string  $operator
     * @param  \DateTimeInterface|string|int|null  $value
     * @return static
     */
    public function orWhereYear($column, $operator, $value = null) { }

    /**
     * @param  \Closure  $callback
     * @param  string  $boolean
     * @return static
     */
    public function whereNested(\Closure $callback, $boolean = 'and') { }

    /**
     * @return \Illuminate\Database\Query\Builder
     */
    public function forNestedWhere() { }

    /**
     * @param  \Illuminate\Database\Query\Builder|static  $query
     * @param  string  $boolean
     * @return static
     */
    public function addNestedWhereQuery($query, $boolean = 'and') { }

    /**
     * @param  \Closure  $callback
     * @param  string  $boolean
     * @param  bool  $not
     * @return static
     */
    public function whereExists(\Closure $callback, $boolean = 'and', $not = false) { }

    /**
     * @param  \Closure  $callback
     * @param  bool  $not
     * @return static
     */
    public function orWhereExists(\Closure $callback, $not = false) { }

    /**
     * @param  \Closure  $callback
     * @param  string  $boolean
     * @return static
     */
    public function whereNotExists(\Closure $callback, $boolean = 'and') { }

    /**
     * @param  \Closure  $callback
     * @return static
     */
    public function orWhereNotExists(\Closure $callback) { }

    /**
     * @param  \Illuminate\Database\Query\Builder  $query
     * @param  string  $boolean
     * @param  bool  $not
     * @return static
     */
    public function addWhereExistsQuery(self $query, $boolean = 'and', $not = false) { }

    /**
     * @param  array  $columns
     * @param  string  $operator
     * @param  array  $values
     * @param  string  $boolean
     * @return static
     *
     * @throws \InvalidArgumentException
     */
    public function whereRowValues($columns, $operator, $values, $boolean = 'and') { }

    /**
     * @param  array  $columns
     * @param  string  $operator
     * @param  array  $values
     * @return static
     */
    public function orWhereRowValues($columns, $operator, $values) { }

    /**
     * @param  string  $column
     * @param  mixed  $value
     * @param  string  $boolean
     * @param  bool  $not
     * @return static
     */
    public function whereJsonContains($column, $value, $boolean = 'and', $not = false) { }

    /**
     * @param  string  $column
     * @param  mixed  $value
     * @return static
     */
    public function orWhereJsonContains($column, $value) { }

    /**
     * @param  string  $column
     * @param  mixed  $value
     * @param  string  $boolean
     * @return static
     */
    public function whereJsonDoesntContain($column, $value, $boolean = 'and') { }

    /**
     * @param  string  $column
     * @param  mixed  $value
     * @return static
     */
    public function orWhereJsonDoesntContain($column, $value) { }

    /**
     * @param  string  $column
     * @param  mixed  $operator
     * @param  mixed  $value
     * @param  string  $boolean
     * @return static
     */
    public function whereJsonLength($column, $operator, $value = null, $boolean = 'and') { }

    /**
     * @param  string  $column
     * @param  mixed  $operator
     * @param  mixed  $value
     * @return static
     */
    public function orWhereJsonLength($column, $operator, $value = null) { }

    /**
     * @param  string  $method
     * @param  array  $parameters
     * @return static
     */
    public function dynamicWhere($method, $parameters) { }

    /**
     * @param  array|string  ...$groups
     * @return static
     */
    public function groupBy(...$groups) { }

    /**
     * @param  string  $sql
     * @param  array  $bindings
     * @return static
     */
    public function groupByRaw($sql, array $bindings = []) { }

    /**
     * @param  string  $column
     * @param  string|null  $operator
     * @param  string|null  $value
     * @param  string  $boolean
     * @return static
     */
    public function having($column, $operator = null, $value = null, $boolean = 'and') { }

    /**
     * @param  string  $column
     * @param  string|null  $operator
     * @param  string|null  $value
     * @return static
     */
    public function orHaving($column, $operator = null, $value = null) { }

    /**
     * @param  string  $column
     * @param  array  $values
     * @param  string  $boolean
     * @param  bool  $not
     * @return static
     */
    public function havingBetween($column, array $values, $boolean = 'and', $not = false) { }

    /**
     * @param  string  $sql
     * @param  array  $bindings
     * @param  string  $boolean
     * @return static
     */
    public function havingRaw($sql, array $bindings = [], $boolean = 'and') { }

    /**
     * @param  string  $sql
     * @param  array  $bindings
     * @return static
     */
    public function orHavingRaw($sql, array $bindings = []) { }


    /**
     * @param  string  $column
     * @return static
     */
    public function orderByDesc($column) { }

    /**
     * @param  string  $seed
     * @return static
     */
    public function inRandomOrder($seed = '') { }

    /**
     * @param  string  $sql
     * @param  array  $bindings
     * @return static
     */
    public function orderByRaw($sql, $bindings = []) { }

    /**
     * @param  int  $value
     * @return static
     */
    public function skip($value) { }

    /**
     * @param  int  $value
     * @return static
     */
    public function offset($value) { }

    /**
     * @param  int  $value
     * @return static
     */
    public function take($value) { }

    /**
     * @param  int  $value
     * @return static
     */
    public function limit($value) { }

    /**
     * @param  int  $page
     * @param  int  $perPage
     * @return static
     */
    public function forPage($page, $perPage = 15) { }

    /**
     * @param  int  $perPage
     * @param  int|null  $lastId
     * @param  string  $column
     * @return static
     */
    public function forPageBeforeId($perPage = 15, $lastId = 0, $column = 'id') { }

    /**
     * @param  int  $perPage
     * @param  int|null  $lastId
     * @param  string  $column
     * @return static
     */
    public function forPageAfterId($perPage = 15, $lastId = 0, $column = 'id') { }

    /**
     * @param  \Illuminate\Database\Query\Builder|\Closure  $query
     * @param  bool  $all
     * @return static
     */
    public function union($query, $all = false) { }

    /**
     * @param  \Illuminate\Database\Query\Builder|\Closure  $query
     * @return static
     */
    public function unionAll($query) { }

    /**
     * @param  string|bool  $value
     * @return static
     */
    public function lock($value = true) { }

    /**
     * @return static
     */
    public function lockForUpdate() { }

    /**
     * @return static
     */
    public function sharedLock() { }

    /**
     * @return string
     */
    public function toSql() { }

    /**
     * @param  array  $columns
     * @return int
     */
    public function getCountForPagination($columns = ['*']) { }

    /**
     * @param  string  $column
     * @param  string  $glue
     * @return string
     */
    public function implode($column, $glue = '') { }

    /**
     * @return bool
     */
    public function exists() { }

    /**
     * @return bool
     */
    public function doesntExist() { }

    /**
     * @param  \Closure  $callback
     * @return mixed
     */
    public function existsOr(Closure $callback) { }

    /**
     * @param  \Closure  $callback
     * @return mixed
     */
    public function doesntExistOr(Closure $callback) { }

    /**
     * @param  string  $columns
     * @return int
     */
    public function count($columns = '*') { }

    /**
     * @param  string  $column
     * @return mixed
     */
    public function min($column) { }

    /**
     * @param  string  $column
     * @return mixed
     */
    public function max($column) { }

    /**
     * @param  string  $column
     * @return mixed
     */
    public function sum($column) { }

    /**
     * @param  string  $column
     * @return mixed
     */
    public function avg($column) { }

    /**
     * @param  string  $column
     * @return mixed
     */
    public function average($column) { }

    /**
     * @param  string  $function
     * @param  array  $columns
     * @return mixed
     */
    public function aggregate($function, $columns = ['*']) { }

    /**
     * @param  string  $function
     * @param  array  $columns
     * @return float|int
     */
    public function numericAggregate($function, $columns = ['*']) { }

    /**
     * @param  array  $values
     * @return bool
     */
    public function insert(array $values) { }

    /**
     * @param  array  $values
     * @return int
     */
    public function insertOrIgnore(array $values) { }

    /**
     * @param  array  $values
     * @param  string|null  $sequence
     * @return int
     */
    public function insertGetId(array $values, $sequence = null) { }

    /**
     * @param  array  $columns
     * @param  \Closure|\Illuminate\Database\Query\Builder|string  $query
     * @return int
     */
    public function insertUsing(array $columns, $query) { }

    /**
     * @param  array  $values
     * @return int
     */
    public function update(array $values) { }

    /**
     * @param  array  $attributes
     * @param  array  $values
     * @return bool
     */
    public function updateOrInsert(array $attributes, array $values = []) { }

    /**
     * @param  string  $column
     * @param  float|int  $amount
     * @param  array  $extra
     * @return int
     *
     * @throws \InvalidArgumentException
     */
    public function increment($column, $amount = 1, array $extra = []) { }

    /**
     * @param  string  $column
     * @param  float|int  $amount
     * @param  array  $extra
     * @return int
     *
     * @throws \InvalidArgumentException
     */
    public function decrement($column, $amount = 1, array $extra = []) { }

    /**
     * @param  mixed  $id
     * @return int
     */
    public function delete($id = null) { }

    /**
     * @return void
     */
    public function truncate() { }

    /**
     * @return \Illuminate\Database\Query\Builder
     */
    public function newQuery() { }

    /**
     * @param  mixed  $value
     * @return \Illuminate\Database\Query\Expression
     */
    public function raw($value) { }

    /**
     * @return array
     */
    public function getBindings() { }

    /**
     * @return array
     */
    public function getRawBindings() { }

    /**
     * @param  array  $bindings
     * @param  string  $type
     * @return $this
     *
     * @throws \InvalidArgumentException
     */
    public function setBindings(array $bindings, $type = 'where') { }

    /**
     * @param  mixed  $value
     * @param  string  $type
     * @return $this
     *
     * @throws \InvalidArgumentException
     */
    public function addBinding($value, $type = 'where') { }

    /**
     * @param  \Illuminate\Database\Query\Builder  $query
     * @return $this
     */
    public function mergeBindings(self $query) { }

    /**
     * @return \Illuminate\Database\ConnectionInterface
     */
    public function getConnection() { }

    /**
     * @return \Illuminate\Database\Query\Processors\Processor
     */
    public function getProcessor() { }

    /**
     * @return \Illuminate\Database\Query\Grammars\Grammar
     */
    public function getGrammar() { }

    /**
     * @return static
     */
    public function useWritePdo() { }

    /**
     * @param  array  $properties
     * @return static
     */
    public function cloneWithout(array $properties) { }

    /**
     * @param  array  $except
     * @return static
     */
    public function cloneWithoutBindings(array $except) { }

    /**
     * @return static
     */
    public function dump() { }

    /**
     * @return void
     */
    public function dd() { }

}
